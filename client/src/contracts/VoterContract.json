{
  "contractName": "VoterContract",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/VoterContract.sol\":\"VoterContract\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/VoterContract.sol\":{\"keccak256\":\"0x091dc90d85c8feb0181b97d788889c8b4e2e7c2094f0b6661e778a09309e5188\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf3b31e222d3ee45c5bf1f1da62aea688af892321549560c03cc9d7406b24a6d\",\"dweb:/ipfs/Qmdr7vVrEqMAYQdqUTMRWscTvLttZeDXEX5E7Uy6x7Wo5Q\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220beaff15ef7e81fa932b4519586c5c698abc6ffacf69f26d34a6331de8d57744364736f6c63430008000033",
  "deployedBytecode": "0x6080604052600080fdfea2646970667358221220beaff15ef7e81fa932b4519586c5c698abc6ffacf69f26d34a6331de8d57744364736f6c63430008000033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "232:1773:2:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "232:1773:2:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// import ERC20Votes\n// import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20VotesComp.sol\";\ncontract VoterContract {\n    // mapping with voter id and public key\n    // mapping(address => string) public VoterPubKeyList;\n\n    // // mapping with voteer id and voter's address\n    // mapping(string => address) public linkedVoterId;\n\n    // // transfer coin to voter\n\n    // // transfer coin to candidate\n    // constructor() ERC20Votes() {}\n\n\n    // // ERC20Votes Consists:\n\n    // // checkpoints(account, pos)\n    // // numCheckpoints(account)\n    // // delegates(account)\n\n    // // getVotes(account)\n    // function getCandidateVotes(address candidateAccount) public view {\n    //     // VoterPubKeyList[candidate] = \"0xB...JKLAS87JHKSA8H\";\n    //   require(candidateAccount != address(0), 'Error - Candidate account cannot be zero address');\n    //   getVotes(candidateAccount);        \n    // }\n\n\n    // // getPastVotes(account, blockNumber)\n\n    // // getPastTotalSupply(blockNumber)\n    \n    // // delegate(delegatee)\n    \n    // // delegateBySig(delegatee, nonce, expiry, v, r, s)\n    // function delegateBySignature(address candidate, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) public {\n    //   delegateBySig(candidate, nonce, expiry, v, r, s);\n    // }\n    // // _maxSupply()\n    \n    // // _mint(account, amount)\n    // function mint(address to, uint256 amount) public {\n    //   _mint(to, amount);\n    // }\n\n    // // _burn(account, amount)\n\n\n    // // _afterTokenTransfer(from, to, amount)\n    // function afterTokenTransfer(address _from, address _to, uint256 amount) public {\n    //   require(_to != address(0), 'Error - ERC20 transfer to zero address');\n    //   require(amount != 0, 'Error - ERC20 cannot transfer zero amount');\n    //   _afterTokenTransfer(_from, _to, amount);\n    // }\n    // // _delegate(delegator, delegatee)\n}\n",
  "sourcePath": "D:\\Projects\\networkpoll\\contracts\\VoterContract.sol",
  "ast": {
    "absolutePath": "project:/contracts/VoterContract.sol",
    "exportedSymbols": {
      "VoterContract": [
        58
      ]
    },
    "id": 59,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 57,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:2"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 58,
        "linearizedBaseContracts": [
          58
        ],
        "name": "VoterContract",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 59,
        "src": "232:1773:2"
      }
    ],
    "src": "32:1974:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.0+commit.c7dfd78e.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0xe08968A7e216f688D189dD43a1d3105B421FE8f9",
      "transactionHash": "0x8237f6bcee7a1065f3f79f035fc0499668157ff98d93f4d2a9927371c4602967"
    }
  },
  "schemaVersion": "3.4.10",
  "updatedAt": "2022-10-25T07:26:20.467Z",
  "networkType": "ethereum",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}